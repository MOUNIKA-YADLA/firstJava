Complete Frontend-Focused Upload History Solution**

I'll provide you with all the new files needed to implement a frontend-displayed upload history while storing data server-side.

## **1. New Entity Class**
```java
// src/main/java/com/example/demo/model/UploadRecord.java
package com.example.demo.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class UploadRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String filename;
    private String username;
    private LocalDateTime uploadTime;
    private int successCount;
    private int failureCount;
    
    // Constructors
    public UploadRecord() {}
    
    public UploadRecord(String filename, String username, int successCount, int failureCount) {
        this.filename = filename;
        this.username = username;
        this.uploadTime = LocalDateTime.now();
        this.successCount = successCount;
        this.failureCount = failureCount;
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public String getFilename() { return filename; }
    public String getUsername() { return username; }
    public LocalDateTime getUploadTime() { return uploadTime; }
    public int getSuccessCount() { return successCount; }
    public int getFailureCount() { return failureCount; }
}
```

## **2. New Repository Interface**
```java
// src/main/java/com/example/demo/repository/UploadRecordRepository.java
package com.example.demo.repository;

import com.example.demo.model.UploadRecord;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface UploadRecordRepository extends JpaRepository<UploadRecord, Long> {
    List<UploadRecord> findAllByOrderByUploadTimeDesc();
}
```

## **3. New Service Class**
```java
// src/main/java/com/example.demo/service/UploadHistoryService.java
package com.example.demo.service;

import com.example.demo.model.UploadRecord;
import com.example.demo.repository.UploadRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UploadHistoryService {
    
    @Autowired
    private UploadRecordRepository uploadRecordRepository;
    
    public void recordUpload(String filename, String username, int successCount, int failureCount) {
        UploadRecord record = new UploadRecord(filename, username, successCount, failureCount);
        uploadRecordRepository.save(record);
    }
    
    public List<UploadRecord> getAllUploads() {
        return uploadRecordRepository.findAllByOrderByUploadTimeDesc();
    }
}
```

## **4. New REST Controller**
```java
// src/main/java/com/example/demo/controller/UploadHistoryController.java
package com.example.demo.controller;

import com.example.demo.model.UploadRecord;
import com.example.demo.service.UploadHistoryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/history")
public class UploadHistoryController {
    
    @Autowired
    private UploadHistoryService uploadHistoryService;
    
    @GetMapping
    public List<UploadRecord> getUploadHistory() {
        return uploadHistoryService.getAllUploads();
    }
}
```

## **5. Modified BankAccountController.java**
```java
// Add this method to your existing BankAccountController
@Autowired
private UploadHistoryService uploadHistoryService;

@PostMapping("/upload")
public String handleFileUpload(
    @RequestParam("file") MultipartFile file,
    Model model,
    Authentication authentication
) {
    try {
        String username = authentication.getName();
        List<BankAccountUploadResult> results = excelService.processExcelFile(file);
        
        // Record the upload
        int successCount = (int) results.stream().filter(r -> r.isSuccess()).count();
        uploadHistoryService.recordUpload(
            file.getOriginalFilename(),
            username,
            successCount,
            results.size() - successCount
        );
        
        model.addAttribute("results", results);
        return "bank-accounts/result";
    } catch (Exception e) {
        model.addAttribute("error", "Error: " + e.getMessage());
        return "bank-accounts/upload";
    }
}
```

## **6. New Frontend History Page**
```html
<!-- src/main/resources/templates/history.html -->
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Upload History</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <h1 class="mb-4">Upload History</h1>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Filename</th>
                    <th>User</th>
                    <th>Upload Time</th>
                    <th>Success</th>
                    <th>Failed</th>
                </tr>
            </thead>
            <tbody id="historyTable">
                <!-- Will be populated by JavaScript -->
            </tbody>
        </table>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetch('/api/history')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('historyTable');
                    data.forEach(record => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${record.filename}</td>
                            <td>${record.username}</td>
                            <td>${new Date(record.uploadTime).toLocaleString()}</td>
                            <td class="text-success">${record.successCount}</td>
                            <td class="text-danger">${record.failureCount}</td>
                        `;
                        tableBody.appendChild(row);
                    });
                });
        });
    </script>
</body>
</html>
```

## **7. Add Link to History Page**
Add this to your navigation or upload page:
```html
<a href="/history" class="btn btn-secondary">View Upload History</a>
```

## **Key Features**
✅ **Persistent storage** - All uploads are saved in the database  
✅ **Real-time display** - History loads via AJAX without page reload  
✅ **User tracking** - Shows who uploaded each file  
✅ **Clean separation** - Dedicated service and controller for history  
✅ **Modern UI** - Bootstrap-styled table with success/failure indicators  

This implementation gives you a complete, production-ready upload history system that meets all your requirements. The history is stored server-side but displayed elegantly in the frontend.
