upload.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upload Bank Accounts</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #eef1f7;
            margin: 0;
            padding: 0;
            text-align: center;
        }

        .container {
            width: 50%;
            margin: 50px auto;
            background: #ffffff;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border-radius: 12px;
        }

        h2 {
            color: #333;
            font-size: 24px;
        }

        .upload-box {
            padding: 20px;
            border: 2px dashed #007bff;
            background: #f8f9fc;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        input[type="file"] {
            padding: 10px;
            width: 80%;
            border: 1px solid #ccc;
            border-radius: 6px;
        }

        button {
            background-color: #007bff;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin-top: 10px;
        }

        button:hover {
            background-color: #0056b3;
        }

        .error-report {
            margin-top: 15px;
        }

        .error-report a {
            display: inline-block;
            background-color: #dc3545;
            color: white;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 6px;
            font-size: 14px;
        }

        .error-report a:hover {
            background-color: #b02a37;
        }

    </style>
</head>
<body>

    <div class="container">
        <h2>Upload Bank Accounts</h2>

        <div class="upload-box">
            <form action="/upload" method="POST" enctype="multipart/form-data">
                <input type="file" name="file" required>
                <button type="submit">Upload & Validate</button>
            </form>
        </div>

        <div class="error-report" th:if="${errorFileUrl}">
            <a th:href="${errorFileUrl}" download>Download Error Report</a>
        </div>
    </div>

</body>
</html>









UploadController.java)
package com.example.upload.controller;

import com.example.upload.service.ExcelService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@Controller
public class UploadController {

    @Autowired
    private ExcelService excelService;

    @PostMapping("/upload")
    public String uploadFile(@RequestParam("file") MultipartFile file, Model model) {
        String errorFileUrl = excelService.processExcelFile(file);
        
        if (errorFileUrl != null) {
            model.addAttribute("errorFileUrl", errorFileUrl); // Provide error report
        }
        
        return "upload";
    }
}

ExcelService.java

package com.example.upload.service;

import com.example.upload.entity.BankAccount;
import com.example.upload.repository.BankAccountRepository;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

@Service
public class ExcelService {

    @Autowired
    private BankAccountRepository repository;

    public String processExcelFile(MultipartFile file) {
        List<BankAccount> validAccounts = new ArrayList<>();
        List<String> errors = new ArrayList<>();

        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);

            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // Skip header

                String accountId = row.getCell(0).getStringCellValue();
                String accountName = row.getCell(1).getStringCellValue();
                double balance = row.getCell(2).getNumericCellValue();

                // Validation
                if (accountId.length() > 8 || accountName.isEmpty()) {
                    errors.add("Row " + (row.getRowNum() + 1) + ": Invalid data");
                } else {
                    validAccounts.add(new BankAccount(accountId, accountName, balance));
                }
            }

            // Save valid data
            repository.saveAll(validAccounts);

            // Generate error report if any
            if (!errors.isEmpty()) {
                return generateErrorReport(errors);
            }

        } catch (Exception e) {
            return null;
        }
        return null;
    }

    private String generateErrorReport(List<String> errors) {
        try {
            File errorFile = new File("error_report.txt");
            FileWriter writer = new FileWriter(errorFile);
            for (String error : errors) {
                writer.write(error + "\n");
            }
            writer.close();
            return "/error_report.txt";
        } catch (IOException e) {
            return null;
        }
    }
}


BankAccount.java

package com.example.upload.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BankAccount {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String accountId;
    private String accountName;
    private double balance;
}



BankAccountRepository.java

package com.example.upload.repository;

import com.example.upload.entity.BankAccount;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BankAccountRepository extends JpaRepository<BankAccount, Long> {
}
